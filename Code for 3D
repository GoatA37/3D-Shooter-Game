<!-- Import Three.js and Cannon.js from a CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cannon-es/0.20.0/cannon-es.min.js"></script>

<script>
    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // UI
    const ui = document.getElementById('ui');
    let playerHealth = 100;
    let playerShield = 100;
    let ammo = 10;
    const maxAmmo = 10;

    function updateUI() {
        ui.innerHTML = `Health: ${playerHealth} | Shield: ${playerShield} | Ammo: ${ammo}`;
        if (playerHealth <= 0) {
            ui.innerHTML = "Game Over! Refresh to restart.";
            cancelAnimationFrame(animationID);
        }
    }

    // Pointer Lock for Chromebook
    document.body.addEventListener('click', () => {
        if (document.pointerLockElement !== document.body) {
            document.body.requestPointerLock();
        }
    });

    // Physics World
    const world = new CANNON.World();
    world.gravity.set(0, -9.8, 0);

    // Player Physics
    const playerBody = new CANNON.Body({ mass: 1, shape: new CANNON.Sphere(1.3) });
    playerBody.position.set(0, 5, 0);
    world.addBody(playerBody);

    // Ground
    const mapSize = 200;
    const terrain = new THREE.Mesh(
        new THREE.PlaneGeometry(mapSize, mapSize),
        new THREE.MeshStandardMaterial({ color: 0x228B22, side: THREE.DoubleSide })
    );
    terrain.rotation.x = -Math.PI / 2;
    scene.add(terrain);

    // Lighting
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(10, 20, 10);
    scene.add(light);

    // Player Movement
    const movement = { forward: false, backward: false, left: false, right: false, jump: false };
    document.addEventListener('keydown', (event) => {
        if (event.key === 'w') movement.forward = true;
        if (event.key === 's') movement.backward = true;
        if (event.key === 'a') movement.left = true;
        if (event.key === 'd') movement.right = true;
        if (event.key === ' ') movement.jump = true;
        if (event.key === 'r') { ammo = maxAmmo; updateUI(); }
    });

    document.addEventListener('keyup', (event) => {
        if (event.key === 'w') movement.forward = false;
        if (event.key === 's') movement.backward = false;
        if (event.key === 'a') movement.left = false;
        if (event.key === 'd') movement.right = false;
        if (event.key === ' ') movement.jump = false;
    });

    // Enemy AI
    class Enemy {
        constructor(x, y, z) {
            this.mesh = new THREE.Mesh(
                new THREE.SphereGeometry(1, 16, 16),
                new THREE.MeshStandardMaterial({ color: 0xff0000 })
            );
            this.mesh.position.set(x, y, z);
            scene.add(this.mesh);
            this.health = 20;
        }

        moveTowardsPlayer() {
            const direction = new THREE.Vector3().subVectors(camera.position, this.mesh.position).normalize();
            this.mesh.position.addScaledVector(direction, 0.02);
        }

        takeDamage() {
            this.health -= 10;
            if (this.health <= 0) {
                scene.remove(this.mesh);
                enemies.splice(enemies.indexOf(this), 1);
            }
        }
    }

    const enemies = [];
    function spawnEnemy() {
        if (playerHealth > 0) {
            const x = (Math.random() - 0.5) * mapSize;
            const z = (Math.random() - 0.5) * mapSize;
            enemies.push(new Enemy(x, 1, z));
            setTimeout(spawnEnemy, 8000);
        }
    }
    spawnEnemy();

    // Shooting Mechanic
    const bullets = [];
    document.addEventListener('mousedown', () => {
        if (ammo > 0) {
            ammo--;
            updateUI();

            const bullet = new THREE.Mesh(
                new THREE.SphereGeometry(0.2, 8, 8),
                new THREE.MeshStandardMaterial({ color: 0xffff00 })
            );
            bullet.position.copy(camera.position);
            scene.add(bullet);
            bullets.push({ mesh: bullet, direction: camera.getWorldDirection(new THREE.Vector3()) });
        }
    });

    // Game Loop
    let animationID;
    function animate() {
        animationID = requestAnimationFrame(animate);
        world.step(1 / 60);

        // Player movement
        if (movement.forward) playerBody.position.z -= 0.1;
        if (movement.backward) playerBody.position.z += 0.1;
        if (movement.left) playerBody.position.x -= 0.1;
        if (movement.right) playerBody.position.x += 0.1;

        camera.position.copy(playerBody.position);

        // Update enemies
        enemies.forEach(enemy => enemy.moveTowardsPlayer());

        renderer.render(scene, camera);
    }
    animate();
</script>
